{"version":3,"sources":["sunny.jpg","App.js","serviceWorker.js","index.js","stormy.jpg"],"names":["module","exports","__webpack_require__","p","Weather","temp","Math","round","_this","this","props","weatherData","map","x","react_default","a","createElement","class","name","toF","main","weather","Component","App","_this2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","location","value","background","sunny","handleChange","bind","assertThisInitialized","handleKeyPress","getWeatherData","e","key","setState","target","_this3","fetch","concat","then","response","json","data","stormy","toConsumableArray","catch","alert","length","divStyle","backgroundImage","style","type","placeholder","onChange","onKeyPress","App_Weather","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8NCQlCC,qLACAC,GACF,OAAOC,KAAKC,MAAsB,GAAfF,EAAK,QAAY,EAAI,qCAGlC,IAAAG,EAAAC,KACN,OACEA,KAAKC,MAAMC,YAAYC,IAAI,SAACC,GAC1B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,MAAM,WACTH,EAAAC,EAAAC,cAAA,KAAGC,MAAM,QAAQJ,EAAEK,MACnBJ,EAAAC,EAAAC,cAAA,SAAIR,EAAKW,IAAIN,EAAEO,KAAKf,MAApB,SACAS,EAAAC,EAAAC,cAAA,SAAIH,EAAEQ,QAAQ,GAAGD,gBAZPE,cA0FPC,cAnEb,SAAAA,EAAYb,GAAM,IAAAc,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAhB,KAAAc,IAChBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAhB,KAAAgB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAApB,KAAMC,KACDoB,MAAQ,CACXnB,YAAc,GACdoB,SAAU,GACVC,MAAQ,GACRC,WAAaC,KAEfV,EAAKW,aAAeX,EAAKW,aAAaC,KAAlBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACpBA,EAAKc,eAAiBd,EAAKc,eAAeF,KAApBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACtBA,EAAKe,eAAiBf,EAAKe,eAAeH,KAApBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAVNA,8EAaHgB,GACb,GAAa,UAAVA,EAAEC,IAAgB,CACnB,IAAIT,EAAQvB,KAAKqB,MAAME,MACvBvB,KAAKiC,SAAS,CAACX,SAASC,IACxBvB,KAAKiC,SAAS,CAACV,MAAM,KACrBvB,KAAK8B,uDAIIC,GACX/B,KAAKiC,SAAS,CAACV,MAAMQ,EAAEG,OAAOX,iDAGhB,IAAAY,EAAAnC,KACdoC,MAAK,qDAAAC,OAAsDrC,KAAKqB,MAAME,MAAjE,4CACFe,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAOJ,MALa,UADDA,EAAK7B,QAAQ,GAAGD,KAE1BwB,EAAKF,SAAS,CAACT,WAAYC,MAE3BU,EAAKF,SAAS,CAACT,WAAWkB,MAErBP,EAAKF,SAAS,CAAC/B,YAAW,GAAAmC,OAAArB,OAAA2B,EAAA,EAAA3B,CAAMmB,EAAKd,MAAMnB,aAAjB,CAA6BuC,QAC7DG,MAAM,WACPC,MAAM,qEAKV,OAAI7C,KAAKqB,MAAMnB,YAAY4C,OAAS,EACiB,UAA9C9C,KAAKqB,MAAMnB,YAAY,GAAGU,QAAQ,GAAGD,KAAmBX,KAAKiC,SAAS,CAACT,WAAWC,MAAUzB,KAAKiC,SAAS,CAACT,WAAWkB,MAC9GA,qCAKf,IAAMK,EAAW,CACfC,gBAAiB,OAAShD,KAAKqB,MAAMG,WAAa,KAEpD,OACAnB,EAAAC,EAAAC,cAAA,OAAKC,MAAM,YAAYyC,MAAOF,GAC5B1C,EAAAC,EAAAC,cAAA,OAAKC,MAAM,OACTH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,cACTH,EAAAC,EAAAC,cAAA,SAAO2C,KAAK,OAAOC,YAAY,+BAA+B5B,MAAOvB,KAAKqB,MAAME,MAAO6B,SAAUpD,KAAK0B,aAAc2B,WAAYrD,KAAK6B,kBAEvIxB,EAAAC,EAAAC,cAAC+C,EAAD,CACEpD,YAAaF,KAAKqB,MAAMnB,uBA7DhBW,aClBE0C,QACW,cAA7BC,OAAOlC,SAASmC,UAEe,UAA7BD,OAAOlC,SAASmC,UAEhBD,OAAOlC,SAASmC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC,kCEnInB7E,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.fa20c197.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sunny.927c829c.jpg\";","import React, { Component } from 'react';\nimport sunny from './sunny.jpg';\nimport stormy from './stormy.jpg';\nimport './App.css';\n\n\n\n\nclass Weather extends Component {\n  toF(temp){\n    return Math.round((temp-273.15) * 9/5 + 32)\n  }\n\n  render(){\n    return(\n      this.props.weatherData.map((x) => {\n        return(\n          <div class=\"weather\">\n            <p class=\"name\">{x.name}</p>\n            <p>{this.toF(x.main.temp)}&deg;F</p>\n            <p>{x.weather[0].main}</p>\n          </div>\n        )\n      })        \n    )\n  }\n}\n\n\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      weatherData : [],\n      location: '',\n      value : '',\n      background : sunny\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleKeyPress = this.handleKeyPress.bind(this)\n    this.getWeatherData = this.getWeatherData.bind(this)\n  }\n\n  handleKeyPress(e){\n    if(e.key === \"Enter\"){\n      let value = this.state.value\n      this.setState({location:value})\n      this.setState({value:''})\n      this.getWeatherData();\n    }\n  }\n\n  handleChange(e){\n    this.setState({value:e.target.value})\n  }\n\n  getWeatherData(){\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=54e5c316b975fbdbb506569977dee87e`)\n      .then(response => response.json())\n      .then(data => {\n        let skies = data.weather[0].main\n        if(skies === 'Clear'){\n          this.setState({background: sunny})\n        }else{\n          this.setState({background:stormy})\n        }        \n        return this.setState({weatherData: [...this.state.weatherData,data] })\n      }).catch(function(){\n        alert('That city was not found')\n      })\n  }\n\n  getBackground(){\n    if (this.state.weatherData.length > 0){\n    return this.state.weatherData[0].weather[0].main === 'clear' ? this.setState({background:sunny}) : this.setState({background:stormy})\n    } else {return stormy}\n  }\n\n\n  render() {\n    const divStyle = {\n      backgroundImage: 'url(' + this.state.background + ')'\n    }\n    return(\n    <div class='container' style={divStyle}>\n      <div class='app'>\n        <div class='inputField'>\n          <input type='text' placeholder='Pick a city then press enter' value={this.state.value} onChange={this.handleChange} onKeyPress={this.handleKeyPress} />\n        </div>\n        <Weather\n          weatherData={this.state.weatherData}\n        />    \n      </div>\n    </div>\n  )}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/stormy.7ec02770.jpg\";"],"sourceRoot":""}